#![no_main]
#![no_std]
#![deny(unsafe_code)]
#![deny(warnings)]

use {
    core::option::Option,
    cortex_m::asm,
    hal::{gpio::Level, pac::PWM0, pwm::*},
    nrf52833_hal as hal, panic_rtt_target as _,
    rtt_target::{rprintln, rtt_init_print},
    systick_monotonic::*,
};

const SEQUENCE_LENGTH: usize = 1000;
const SEQ_REFRESH: u32 = 10; // Extra periods per step
const MAX_DUTY: u16 = 10000;

const TIMER_HZ: u32 = 1000; // 1000 Hz (1 ms granularity)

pub type SeqBuffer = &'static mut [u16; 4 * SEQUENCE_LENGTH];
pub type Pwm0 = Option<PwmSeq<PWM0, SeqBuffer, SeqBuffer>>;

#[rtic::app(device = nrf52833_hal::pac, dispatchers=[TIMER0])]
mod app {
    use super::*;

    #[monotonic(binds = SysTick, default = true)]
    type MyMono = Systick<TIMER_HZ>;

    #[shared]
    struct Shared {
        #[lock_free]
        pwm: Pwm0,
    }

    #[local]
    struct Local {}

    #[init(local = [
        SEQBUF0: [u16; 4*SEQUENCE_LENGTH] = [0u16; 4*SEQUENCE_LENGTH],
        SEQBUF1: [u16; 4*SEQUENCE_LENGTH] = [0u16; 4*SEQUENCE_LENGTH]
    ])]
    fn init(cx: init::Context) -> (Shared, Local, init::Monotonics) {
        let SEQBUF0 = cx.local.SEQBUF0;
        let SEQBUF1 = cx.local.SEQBUF1;
        let mono = Systick::new(cx.core.SYST, 64_000_000);

        rtt_init_print!();
        rprintln!("init");

        // Configure GPIO pin P0.10 for fan
        let port0 = hal::gpio::p0::Parts::new(cx.device.P0);
        let led = port0.p0_09.into_push_pull_output(Level::Low).degrade();
        let haptic = port0.p0_20.into_push_pull_output(Level::Low).degrade();

        // Configure PWM
        let pwm = Pwm::new(cx.device.PWM0);
        pwm.set_prescaler(Prescaler::Div16)
            .set_max_duty(MAX_DUTY)
            .set_output_pin(Channel::C0, led)
            .set_output_pin(Channel::C1, haptic)
            .set_counter_mode(CounterMode::Up)
            .set_load_mode(LoadMode::Individual)
            .set_step_mode(StepMode::Auto)
            .set_seq_refresh(Seq::Seq0, SEQ_REFRESH)
            .set_seq_refresh(Seq::Seq1, SEQ_REFRESH)
            .one_shot()
            .enable_interrupt(PwmEvent::PwmPeriodEnd)
            .enable();

        rprintln!("PWM period: {}", pwm.period().0);

        let pwm = pwm.load(Some(SEQBUF0), Some(SEQBUF1), false).ok();

        load_pwm_sequence::spawn().ok();
        start_pwm::spawn().ok();
        (Shared { pwm }, Local {}, init::Monotonics(mono))
    }

    #[idle]
    fn idle(_cx: idle::Context) -> ! {
        loop {
            asm::wfi();
        }
    }

    #[task(binds = PWM0,  shared = [pwm], local = [seq_count: u32 = 0, period_count: u32 = 0])]
    fn pwm0(cx: pwm0::Context) {
        let pwm = cx.shared.pwm.as_ref().unwrap();
        pwm.reset_event(PwmEvent::PwmPeriodEnd);

        *cx.local.period_count = *cx.local.period_count + 1;
        if *cx.local.period_count % (SEQ_REFRESH) == 0 {
            *cx.local.seq_count = *cx.local.seq_count + 1;
            rprintln!("Next sequence, seq_count: {}", *cx.local.seq_count);
            rprintln!(
                "LED: {}, HAPTIC: {}",
                LED_SEQUENCE[*cx.local.seq_count as usize],
                HAPTIC_SEQUENCE[*cx.local.seq_count as usize]
            );
        }
    }

    #[task(shared = [pwm])]
    fn load_pwm_sequence(cx: load_pwm_sequence::Context) {
        let (buf0, buf1, pwm) = cx.shared.pwm.take().unwrap().split();
        let seqbuf0 = buf0.unwrap();
        let seqbuf1 = buf1.unwrap();

        for i in 0..SEQUENCE_LENGTH {
            seqbuf0[i * 4] = LED_SEQUENCE[i];
            seqbuf0[i * 4 + 1] = HAPTIC_SEQUENCE[i];
            seqbuf0[i * 4 + 2] = EMPTY_SEQUENCE[i];
            seqbuf0[i * 4 + 3] = EMPTY_SEQUENCE[i];
        }
        seqbuf1.copy_from_slice(seqbuf0);
        let pwm = pwm.load(Some(seqbuf0), Some(seqbuf1), false).ok();
        *cx.shared.pwm = pwm;
        rprintln!("Loaded PWM sequence");
    }

    #[task(shared = [pwm])]
    fn start_pwm(cx: start_pwm::Context) {
        let pwm = cx.shared.pwm.as_ref().unwrap();
        pwm.start_seq(Seq::Seq0);
        rprintln!("Started PWM");
    }
}

static EMPTY_SEQUENCE: [u16; SEQUENCE_LENGTH] = [0u16; SEQUENCE_LENGTH];

static LED_SEQUENCE: [u16; SEQUENCE_LENGTH] = [
    10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
    10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
    10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
    10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
    10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
    10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
    10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
    10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9900, 9900, 9900, 9900, 9900,
    9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
    9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
    9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
    9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
    9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
    9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9800,
    9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800,
    9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800,
    9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800,
    9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800,
    9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800,
    9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800, 9800,
    9800, 9800, 9800, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700,
    9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700,
    9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700,
    9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700,
    9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700,
    9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700, 9700,
    9700, 9700, 9700, 9700, 9700, 9700, 9700, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600,
    9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600,
    9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600,
    9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600,
    9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600,
    9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600,
    9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9500, 9500, 9500, 9500, 9500,
    9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500,
    9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500,
    9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500,
    9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500,
    9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500,
    9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9500, 9400,
    9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400,
    9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400,
    9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400,
    9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400,
    9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400,
    9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400, 9400,
    9400, 9400, 9400, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300,
    9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300,
    9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300,
    9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300,
    9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300,
    9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300, 9300,
    9300, 9300, 9300, 9300, 9300, 9300, 9300, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200,
    9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200,
    9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200,
    9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200,
    9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200,
    9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200,
    9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9200, 9100, 9100, 9100, 9100, 9100,
    9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100,
    9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100,
    9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100,
    9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100,
    9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100,
    9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100,
];

static HAPTIC_SEQUENCE: [u16; SEQUENCE_LENGTH] = [
    10000, 9994, 9989, 9984, 9979, 9974, 9969, 9964, 9959, 9954, 9949, 9944, 9939, 9934, 9929,
    9924, 9919, 9914, 9909, 9904, 9899, 9894, 9889, 9884, 9879, 9874, 9869, 9864, 9859, 9854, 9849,
    9844, 9839, 9834, 9829, 9824, 9819, 9814, 9809, 9804, 9799, 9794, 9789, 9784, 9779, 9774, 9769,
    9764, 9759, 9754, 9749, 9744, 9739, 9734, 9729, 9724, 9719, 9714, 9709, 9704, 9699, 9694, 9689,
    9684, 9679, 9674, 9669, 9664, 9659, 9654, 9649, 9644, 9639, 9634, 9629, 9624, 9619, 9614, 9609,
    9604, 9599, 9594, 9589, 9584, 9579, 9574, 9569, 9564, 9559, 9554, 9549, 9544, 9539, 9534, 9529,
    9524, 9519, 9514, 9509, 9504, 9499, 9494, 9489, 9484, 9479, 9474, 9469, 9464, 9459, 9454, 9449,
    9444, 9439, 9434, 9429, 9424, 9419, 9414, 9409, 9404, 9399, 9394, 9389, 9384, 9379, 9374, 9369,
    9364, 9359, 9354, 9349, 9344, 9339, 9334, 9329, 9324, 9319, 9314, 9309, 9304, 9299, 9294, 9289,
    9284, 9279, 9274, 9269, 9264, 9259, 9254, 9249, 9244, 9239, 9234, 9229, 9224, 9219, 9214, 9209,
    9204, 9199, 9194, 9189, 9184, 9179, 9174, 9169, 9164, 9159, 9154, 9149, 9144, 9139, 9134, 9129,
    9124, 9119, 9114, 9109, 9104, 9099, 9094, 9089, 9084, 9079, 9074, 9069, 9064, 9059, 9054, 9049,
    9044, 9039, 9034, 9029, 9024, 9019, 9014, 9009, 9004, 8998, 8993, 8988, 8983, 8978, 8973, 8968,
    8963, 8958, 8953, 8948, 8943, 8938, 8933, 8928, 8923, 8918, 8913, 8908, 8903, 8898, 8893, 8888,
    8883, 8878, 8873, 8868, 8863, 8858, 8853, 8848, 8843, 8838, 8833, 8828, 8823, 8818, 8813, 8808,
    8803, 8798, 8793, 8788, 8783, 8778, 8773, 8768, 8763, 8758, 8753, 8748, 8743, 8738, 8733, 8728,
    8723, 8718, 8713, 8708, 8703, 8698, 8693, 8688, 8683, 8678, 8673, 8668, 8663, 8658, 8653, 8648,
    8643, 8638, 8633, 8628, 8623, 8618, 8613, 8608, 8603, 8598, 8593, 8588, 8583, 8578, 8573, 8568,
    8563, 8558, 8553, 8548, 8543, 8538, 8533, 8528, 8523, 8518, 8513, 8508, 8503, 8498, 8493, 8488,
    8483, 8478, 8473, 8468, 8463, 8458, 8453, 8448, 8443, 8438, 8433, 8428, 8423, 8418, 8413, 8408,
    8403, 8398, 8393, 8388, 8383, 8378, 8373, 8368, 8363, 8358, 8353, 8348, 8343, 8338, 8333, 8328,
    8323, 8318, 8313, 8308, 8303, 8298, 8293, 8288, 8283, 8278, 8273, 8268, 8263, 8258, 8253, 8248,
    8243, 8238, 8233, 8228, 8223, 8218, 8213, 8208, 8203, 8198, 8193, 8188, 8183, 8178, 8173, 8168,
    8163, 8158, 8153, 8148, 8143, 8138, 8133, 8128, 8123, 8118, 8113, 8108, 8103, 8098, 8093, 8088,
    8083, 8078, 8073, 8068, 8063, 8058, 8053, 8048, 8043, 8038, 8033, 8028, 8023, 8018, 8013, 8008,
    8003, 7997, 7992, 7987, 7982, 7977, 7972, 7967, 7962, 7957, 7952, 7947, 7942, 7937, 7932, 7927,
    7922, 7917, 7912, 7907, 7902, 7897, 7892, 7887, 7882, 7877, 7872, 7867, 7862, 7857, 7852, 7847,
    7842, 7837, 7832, 7827, 7822, 7817, 7812, 7807, 7802, 7797, 7792, 7787, 7782, 7777, 7772, 7767,
    7762, 7757, 7752, 7747, 7742, 7737, 7732, 7727, 7722, 7717, 7712, 7707, 7702, 7697, 7692, 7687,
    7682, 7677, 7672, 7667, 7662, 7657, 7652, 7647, 7642, 7637, 7632, 7627, 7622, 7617, 7612, 7607,
    7602, 7597, 7592, 7587, 7582, 7577, 7572, 7567, 7562, 7557, 7552, 7547, 7542, 7537, 7532, 7527,
    7522, 7517, 7512, 7507, 7502, 7497, 7492, 7487, 7482, 7477, 7472, 7467, 7462, 7457, 7452, 7447,
    7442, 7437, 7432, 7427, 7422, 7417, 7412, 7407, 7402, 7397, 7392, 7387, 7382, 7377, 7372, 7367,
    7362, 7357, 7352, 7347, 7342, 7337, 7332, 7327, 7322, 7317, 7312, 7307, 7302, 7297, 7292, 7287,
    7282, 7277, 7272, 7267, 7262, 7257, 7252, 7247, 7242, 7237, 7232, 7227, 7222, 7217, 7212, 7207,
    7202, 7197, 7192, 7187, 7182, 7177, 7172, 7167, 7162, 7157, 7152, 7147, 7142, 7137, 7132, 7127,
    7122, 7117, 7112, 7107, 7102, 7097, 7092, 7087, 7082, 7077, 7072, 7067, 7062, 7057, 7052, 7047,
    7042, 7037, 7032, 7027, 7022, 7017, 7012, 7007, 7002, 6996, 6991, 6986, 6981, 6976, 6971, 6966,
    6961, 6956, 6951, 6946, 6941, 6936, 6931, 6926, 6921, 6916, 6911, 6906, 6901, 6896, 6891, 6886,
    6881, 6876, 6871, 6866, 6861, 6856, 6851, 6846, 6841, 6836, 6831, 6826, 6821, 6816, 6811, 6806,
    6801, 6796, 6791, 6786, 6781, 6776, 6771, 6766, 6761, 6756, 6751, 6746, 6741, 6736, 6731, 6726,
    6721, 6716, 6711, 6706, 6701, 6696, 6691, 6686, 6681, 6676, 6671, 6666, 6661, 6656, 6651, 6646,
    6641, 6636, 6631, 6626, 6621, 6616, 6611, 6606, 6601, 6596, 6591, 6586, 6581, 6576, 6571, 6566,
    6561, 6556, 6551, 6546, 6541, 6536, 6531, 6526, 6521, 6516, 6511, 6506, 6501, 6496, 6491, 6486,
    6481, 6476, 6471, 6466, 6461, 6456, 6451, 6446, 6441, 6436, 6431, 6426, 6421, 6416, 6411, 6406,
    6401, 6396, 6391, 6386, 6381, 6376, 6371, 6366, 6361, 6356, 6351, 6346, 6341, 6336, 6331, 6326,
    6321, 6316, 6311, 6306, 6301, 6296, 6291, 6286, 6281, 6276, 6271, 6266, 6261, 6256, 6251, 6246,
    6241, 6236, 6231, 6226, 6221, 6216, 6211, 6206, 6201, 6196, 6191, 6186, 6181, 6176, 6171, 6166,
    6161, 6156, 6151, 6146, 6141, 6136, 6131, 6126, 6121, 6116, 6111, 6106, 6101, 6096, 6091, 6086,
    6081, 6076, 6071, 6066, 6061, 6056, 6051, 6046, 6041, 6036, 6031, 6026, 6021, 6016, 6011, 6006,
    6001, 5995, 5990, 5985, 5980, 5975, 5970, 5965, 5960, 5955, 5950, 5945, 5940, 5935, 5930, 5925,
    5920, 5915, 5910, 5905, 5900, 5895, 5890, 5885, 5880, 5875, 5870, 5865, 5860, 5855, 5850, 5845,
    5840, 5835, 5830, 5825, 5820, 5815, 5810, 5805, 5800, 5795, 5790, 5785, 5780, 5775, 5770, 5765,
    5760, 5755, 5750, 5745, 5740, 5735, 5730, 5725, 5720, 5715, 5710, 5705, 5700, 5695, 5690, 5685,
    5680, 5675, 5670, 5665, 5660, 5655, 5650, 5645, 5640, 5635, 5630, 5625, 5620, 5615, 5610, 5605,
    5600, 5595, 5590, 5585, 5580, 5575, 5570, 5565, 5560, 5555, 5550, 5545, 5540, 5535, 5530, 5525,
    5520, 5515, 5510, 5505, 5500, 5495, 5490, 5485, 5480, 5475, 5470, 5465, 5460, 5455, 5450, 5445,
    5440, 5435, 5430, 5425, 5420, 5415, 5410, 5405, 5400, 5395, 5390, 5385, 5380, 5375, 5370, 5365,
    5360, 5355, 5350, 5345, 5340, 5335, 5330, 5325, 5320, 5315, 5310, 5305, 5300, 5295, 5290, 5285,
    5280, 5275, 5270, 5265, 5260, 5255, 5250, 5245, 5240, 5235, 5230, 5225, 5220, 5215, 5210, 5205,
    5200, 5195, 5190, 5185, 5180, 5175, 5170, 5165, 5160, 5155, 5150, 5145, 5140, 5135, 5130, 5125,
    5120, 5115, 5110, 5105, 5100, 5095, 5090, 5085, 5080, 5075, 5070, 5065, 5060, 5055, 5050, 5045,
    5040, 5035, 5030, 5025, 5020, 5015, 5010, 5005, 5000,
];
